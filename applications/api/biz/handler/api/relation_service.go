// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/TremblingV5/DouTok/applications/api/biz/handler"
	"github.com/TremblingV5/DouTok/applications/api/initialize/rpc"
	"github.com/TremblingV5/DouTok/kitex_gen/relation"
	"github.com/TremblingV5/DouTok/pkg/errno"

	api "github.com/TremblingV5/DouTok/applications/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
)

// RelationAction .
// @router /douyin/relation/action [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		handler.SendResponse(c, errno.ConvertErr(err))
		handler.SendResponse(c, errno.ErrBind)
		return
	}

	rpcReq := relation.DouyinRelationActionRequest{
		ToUserId:   req.ToUserId,
		ActionType: req.ActionType,
	}
	resp, err := rpc.RelationAction(ctx, &rpcReq)
	if err != nil {
		handler.SendResponse(c, errno.ConvertErr(err))
		return
	}
	handler.SendResponse(c, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		handler.SendResponse(c, errno.ErrBind)
		return
	}

	resp, err := rpc.RelationFollowList(ctx, &relation.DouyinRelationFollowListRequest{
		UserId: req.UserId,
	})
	if err != nil {
		handler.SendResponse(c, errno.ConvertErr(err))
		return
	}
	handler.SendResponse(c, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		handler.SendResponse(c, errno.ErrBind)
		return
	}

	resp, err := rpc.RelationFollowerList(ctx, &relation.DouyinRelationFollowerListRequest{
		UserId: req.UserId,
	})
	if err != nil {
		handler.SendResponse(c, errno.ConvertErr(err))
		return
	}
	handler.SendResponse(c, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list [GET]
// 内部为调用获取粉丝列表
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		handler.SendResponse(c, errno.ErrBind)
		return
	}

	resp, err := rpc.RelationFollowerList(ctx, &relation.DouyinRelationFollowerListRequest{
		UserId: req.UserId,
	})
	if err != nil {
		handler.SendResponse(c, errno.ConvertErr(err))
		return
	}
	handler.SendResponse(c, resp)
}
