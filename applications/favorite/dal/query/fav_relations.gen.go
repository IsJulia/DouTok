// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TremblingV5/DouTok/applications/favorite/dal/model"
)

func newFavRelation(db *gorm.DB, opts ...gen.DOOption) favRelation {
	_favRelation := favRelation{}

	_favRelation.favRelationDo.UseDB(db, opts...)
	_favRelation.favRelationDo.UseModel(&model.FavRelation{})

	tableName := _favRelation.favRelationDo.TableName()
	_favRelation.ALL = field.NewAsterisk(tableName)
	_favRelation.UserId = field.NewUint64(tableName, "user_id")
	_favRelation.VideoId = field.NewUint64(tableName, "video_id")
	_favRelation.Status = field.NewBool(tableName, "status")

	_favRelation.fillFieldMap()

	return _favRelation
}

type favRelation struct {
	favRelationDo

	ALL     field.Asterisk
	UserId  field.Uint64
	VideoId field.Uint64
	Status  field.Bool

	fieldMap map[string]field.Expr
}

func (f favRelation) Table(newTableName string) *favRelation {
	f.favRelationDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f favRelation) As(alias string) *favRelation {
	f.favRelationDo.DO = *(f.favRelationDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *favRelation) updateTableName(table string) *favRelation {
	f.ALL = field.NewAsterisk(table)
	f.UserId = field.NewUint64(table, "user_id")
	f.VideoId = field.NewUint64(table, "video_id")
	f.Status = field.NewBool(table, "status")

	f.fillFieldMap()

	return f
}

func (f *favRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *favRelation) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["user_id"] = f.UserId
	f.fieldMap["video_id"] = f.VideoId
	f.fieldMap["status"] = f.Status
}

func (f favRelation) clone(db *gorm.DB) favRelation {
	f.favRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f favRelation) replaceDB(db *gorm.DB) favRelation {
	f.favRelationDo.ReplaceDB(db)
	return f
}

type favRelationDo struct{ gen.DO }

type IFavRelationDo interface {
	gen.SubQuery
	Debug() IFavRelationDo
	WithContext(ctx context.Context) IFavRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFavRelationDo
	WriteDB() IFavRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFavRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFavRelationDo
	Not(conds ...gen.Condition) IFavRelationDo
	Or(conds ...gen.Condition) IFavRelationDo
	Select(conds ...field.Expr) IFavRelationDo
	Where(conds ...gen.Condition) IFavRelationDo
	Order(conds ...field.Expr) IFavRelationDo
	Distinct(cols ...field.Expr) IFavRelationDo
	Omit(cols ...field.Expr) IFavRelationDo
	Join(table schema.Tabler, on ...field.Expr) IFavRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFavRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFavRelationDo
	Group(cols ...field.Expr) IFavRelationDo
	Having(conds ...gen.Condition) IFavRelationDo
	Limit(limit int) IFavRelationDo
	Offset(offset int) IFavRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFavRelationDo
	Unscoped() IFavRelationDo
	Create(values ...*model.FavRelation) error
	CreateInBatches(values []*model.FavRelation, batchSize int) error
	Save(values ...*model.FavRelation) error
	First() (*model.FavRelation, error)
	Take() (*model.FavRelation, error)
	Last() (*model.FavRelation, error)
	Find() ([]*model.FavRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FavRelation, err error)
	FindInBatches(result *[]*model.FavRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FavRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFavRelationDo
	Assign(attrs ...field.AssignExpr) IFavRelationDo
	Joins(fields ...field.RelationField) IFavRelationDo
	Preload(fields ...field.RelationField) IFavRelationDo
	FirstOrInit() (*model.FavRelation, error)
	FirstOrCreate() (*model.FavRelation, error)
	FindByPage(offset int, limit int) (result []*model.FavRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFavRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f favRelationDo) Debug() IFavRelationDo {
	return f.withDO(f.DO.Debug())
}

func (f favRelationDo) WithContext(ctx context.Context) IFavRelationDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f favRelationDo) ReadDB() IFavRelationDo {
	return f.Clauses(dbresolver.Read)
}

func (f favRelationDo) WriteDB() IFavRelationDo {
	return f.Clauses(dbresolver.Write)
}

func (f favRelationDo) Session(config *gorm.Session) IFavRelationDo {
	return f.withDO(f.DO.Session(config))
}

func (f favRelationDo) Clauses(conds ...clause.Expression) IFavRelationDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f favRelationDo) Returning(value interface{}, columns ...string) IFavRelationDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f favRelationDo) Not(conds ...gen.Condition) IFavRelationDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f favRelationDo) Or(conds ...gen.Condition) IFavRelationDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f favRelationDo) Select(conds ...field.Expr) IFavRelationDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f favRelationDo) Where(conds ...gen.Condition) IFavRelationDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f favRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFavRelationDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f favRelationDo) Order(conds ...field.Expr) IFavRelationDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f favRelationDo) Distinct(cols ...field.Expr) IFavRelationDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f favRelationDo) Omit(cols ...field.Expr) IFavRelationDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f favRelationDo) Join(table schema.Tabler, on ...field.Expr) IFavRelationDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f favRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFavRelationDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f favRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IFavRelationDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f favRelationDo) Group(cols ...field.Expr) IFavRelationDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f favRelationDo) Having(conds ...gen.Condition) IFavRelationDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f favRelationDo) Limit(limit int) IFavRelationDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f favRelationDo) Offset(offset int) IFavRelationDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f favRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFavRelationDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f favRelationDo) Unscoped() IFavRelationDo {
	return f.withDO(f.DO.Unscoped())
}

func (f favRelationDo) Create(values ...*model.FavRelation) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f favRelationDo) CreateInBatches(values []*model.FavRelation, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f favRelationDo) Save(values ...*model.FavRelation) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f favRelationDo) First() (*model.FavRelation, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavRelation), nil
	}
}

func (f favRelationDo) Take() (*model.FavRelation, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavRelation), nil
	}
}

func (f favRelationDo) Last() (*model.FavRelation, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavRelation), nil
	}
}

func (f favRelationDo) Find() ([]*model.FavRelation, error) {
	result, err := f.DO.Find()
	return result.([]*model.FavRelation), err
}

func (f favRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FavRelation, err error) {
	buf := make([]*model.FavRelation, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f favRelationDo) FindInBatches(result *[]*model.FavRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f favRelationDo) Attrs(attrs ...field.AssignExpr) IFavRelationDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f favRelationDo) Assign(attrs ...field.AssignExpr) IFavRelationDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f favRelationDo) Joins(fields ...field.RelationField) IFavRelationDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f favRelationDo) Preload(fields ...field.RelationField) IFavRelationDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f favRelationDo) FirstOrInit() (*model.FavRelation, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavRelation), nil
	}
}

func (f favRelationDo) FirstOrCreate() (*model.FavRelation, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavRelation), nil
	}
}

func (f favRelationDo) FindByPage(offset int, limit int) (result []*model.FavRelation, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f favRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f favRelationDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f favRelationDo) Delete(models ...*model.FavRelation) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *favRelationDo) withDO(do gen.Dao) *favRelationDo {
	f.DO = *do.(*gen.DO)
	return f
}
